# -*- coding: utf-8 -*-
"""Text_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-jb2PEpQaEKAasqcb5nmTQTeFm03luAl
"""
import streamlit as st
import pandas as pd
import nltk
from nltk import word_tokenize
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from textblob import TextBlob

# Download NLTK resources
nltk.download('punkt')

# Function to perform Sentiment Analysis
def analyze_sentiment(text):
    blob = TextBlob(text)
    sentiment_score = blob.sentiment.polarity
    if sentiment_score > 0:
        return 'Positive'
    elif sentiment_score < 0:
        return 'Negative'
    else:
        return 'Neutral'

# Function to generate Word Cloud for positive sentiment words
def generate_positive_wordcloud(text):
    positive_words = ' '.join([word for word in word_tokenize(text) if analyze_sentiment(word) == 'Positive'])
    wordcloud = WordCloud(width=800, height=400, background_color ='white').generate(positive_words)
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    st.pyplot()

# Function to generate Word Cloud for negative sentiment words
def generate_negative_wordcloud(text):
    negative_words = ' '.join([word for word in word_tokenize(text) if analyze_sentiment(word) == 'Negative'])
    wordcloud = WordCloud(width=800, height=400, background_color ='white').generate(negative_words)
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    st.pyplot()

# Main function
def main():
    st.title("Text Analysis App")

    # Option to upload a CSV file for sentiment analysis
    uploaded_file = st.file_uploader("Upload CSV file for sentiment analysis:", type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        text_column = st.selectbox("Select text column:", df.columns)
        text = ' '.join(df[text_column].dropna())
        st.write("Uploaded Data:")
        st.dataframe(df, height=400)  # Display uploaded data in a table format

        # Analyze sentiment
        sentiment = analyze_sentiment(text)
        st.write("Sentiment:", sentiment)

        # Generate sentiment histogram
        if sentiment:
            sentiments = [analyze_sentiment(row) for row in df[text_column].dropna()]
            sentiment_df = pd.DataFrame(sentiments, columns=['Sentiment'])
            st.write("Sentiment Histogram:")
            st.bar_chart(sentiment_df['Sentiment'].value_counts())

        # Generate Word Cloud for positive sentiment words
        st.write("Positive Sentiment Word Cloud:")
        generate_positive_wordcloud(text)

        # Generate Word Cloud for negative sentiment words
        st.write("Negative Sentiment Word Cloud:")
        generate_negative_wordcloud(text)

if __name__ == "__main__":
    main()

