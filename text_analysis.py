# -*- coding: utf-8 -*-
"""Text_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-jb2PEpQaEKAasqcb5nmTQTeFm03luAl
"""
import streamlit as st
import pandas as pd
import nltk
from nltk import word_tokenize
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from textblob import TextBlob

# Download NLTK resources
nltk.download('punkt')

# Function to perform Sentiment Analysis
def analyze_sentiment(text):
    blob = TextBlob(text)
    sentiment_score = blob.sentiment.polarity
    if sentiment_score > 0:
        return 'Positive'
    elif sentiment_score < 0:
        return 'Negative'
    else:
        return 'Neutral'

# Main function
def main():
    st.title("Text Analysis App")

    # Option to upload a CSV file for sentiment analysis
    uploaded_file = st.file_uploader("Upload CSV file for sentiment analysis:", type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)

        # Select column for analysis
        text_column = st.selectbox("Select text column for analysis:", df.columns)

        # Slider to select the number of rows to analyze
        num_rows = st.slider("Select number of rows to analyze:", min_value=50, max_value=len(df), value=100)

        # Get text data for analysis
        text = ' '.join(df[text_column].dropna()[:num_rows])

        # Analyze sentiment
        sentiment = analyze_sentiment(text)
        st.write("Sentiment:", sentiment)

        # Generate sentiment histogram
        if sentiment:
            sentiments = [analyze_sentiment(row) for row in df[text_column].dropna()[:num_rows]]
            sentiment_df = pd.DataFrame(sentiments, columns=['Sentiment'])
            st.write("Sentiment Histogram:")
            st.bar_chart(sentiment_df['Sentiment'].value_counts())

        # Separate positive and negative sentiment words
        positive_words = ' '.join([word for word in word_tokenize(text) if analyze_sentiment(word) == 'Positive'])
        negative_words = ' '.join([word for word in word_tokenize(text) if analyze_sentiment(word) == 'Negative'])

        # Generate Word Cloud for positive sentiment words
        positive_wordcloud = WordCloud(width=400, height=200, background_color ='white').generate(positive_words)
        st.write("Positive Sentiment Word Cloud:")
        st.image(positive_wordcloud.to_array(), caption='Positive Sentiment Word Cloud', use_column_width=True)

        # Generate Word Cloud for negative sentiment words
        negative_wordcloud = WordCloud(width=400, height=200, background_color ='white').generate(negative_words)
        st.write("Negative Sentiment Word Cloud:")
        st.image(negative_wordcloud.to_array(), caption='Negative Sentiment Word Cloud', use_column_width=True)

if __name__ == "__main__":
    main()
