# -*- coding: utf-8 -*-
"""Text_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-jb2PEpQaEKAasqcb5nmTQTeFm03luAl
"""
import streamlit as st
from textblob import TextBlob
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import pandas as pd
import spacy
import mysql.connector

# Function to perform Sentiment Analysis
def analyze_sentiment(text):
    blob = TextBlob(text)
    sentiment_score = blob.sentiment.polarity
    if sentiment_score > 0:
        return 'Positive'
    elif sentiment_score < 0:
        return 'Negative'
    else:
        return 'Neutral'

# Function to perform Named Entity Recognition
def analyze_entities(text):
    nlp = spacy.load("en_core_web_sm")
    doc = nlp(text)
    entities = [(ent.text, ent.label_) for ent in doc.ents]
    return entities

# Function to generate Word Cloud
def generate_wordcloud(text):
    wordcloud = WordCloud(width=800, height=400, background_color ='white').generate(text)
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    st.pyplot()

# Function to connect to MySQL Server
def connect_to_mysql():
    try:
        conn = mysql.connector.connect(
            host="your_host",
            user="your_username",
            password="your_password",
            database="your_database"
        )
        if conn.is_connected():
            return conn
    except Exception as e:
        st.error("Error connecting to MySQL Server: " + str(e))

# Main function
def main():
    st.title("Text Analysis App")

    # User text input
    text = st.text_area("Enter text:")

    # Sidebar for analysis selection
    st.sidebar.title("Analysis Selection")
    sentiment_analysis = st.sidebar.checkbox("Sentiment Analysis")
    ner_analysis = st.sidebar.checkbox("Named Entity Recognition")
    wordcloud_analysis = st.sidebar.checkbox("Word Cloud")

    if st.button("Analyze"):
        # Perform Sentiment Analysis
        if sentiment_analysis:
            sentiment = analyze_sentiment(text)
            st.write("Sentiment:", sentiment)

        # Perform Named Entity Recognition
        if ner_analysis:
            entities = analyze_entities(text)
            st.write("Entities:")
            for entity, label in entities:
                st.write(f"{entity} ({label})")

        # Generate Word Cloud
        if wordcloud_analysis:
            generate_wordcloud(text)

        # Display results in a table
        df = pd.DataFrame({'Text': [text]})
        st.write("Analysis Results:")
        st.write(df)

        # Download results as CSV
        if st.button("Download CSV"):
            df.to_csv('analysis_results.csv', index=False)
            st.success("Results downloaded successfully!")

        # Connect to MySQL Server
        conn = connect_to_mysql()
        if conn:
            cursor = conn.cursor()
            cursor.execute("CREATE TABLE IF NOT EXISTS analysis_results (text TEXT)")
            cursor.execute("INSERT INTO analysis_results (text) VALUES (%s)", (text,))
            conn.commit()
            cursor.close()
            conn.close()

if __name__ == "__main__":
    main()
